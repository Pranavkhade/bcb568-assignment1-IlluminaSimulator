
Skip to content
Using Iowa State University Mail with screen readers
Conversations
 
Using 4.99 GB
Program Policies
Powered by Google
Last account activity: 57 minutes ago
Details

'''
README

Program Parameters:
-   seq_len     - Length of the sequence user wishes to simulate
-   Perror      - Rate of error in illumuna reading; Perror = 0.2 means there is 20% chance of a nucleotide reading being wrong
-   c           - Coverage of the sequence (As given in the problem)
-   paired_end  - If data is paired end (True/False; Optional)

Parameters in the defined problem:
c          : Genotyping.  Every true nucleotide at a homozygous locus is read c times in the c reads covering the locus.
paired_end : Paired read ends that overlap.  Every true nucleotide in the overlap is read twice.

Logic:
1. The number of sequences to be simulated is defined; they are equal to the c parameter (Genotyping). If the data is paired end, the iterations are doubled. (iteration 1)
2. In each iteration (iteration 1), another iteration (iteration2) is run to go through each base in the sequence.
3. In each iteration2 a random number is generated from uniform distribution, if that number is less than parameter 'Perror' then the base at that position is changed (error occurs).
4. If the error occurs, the probability is generated randomly for 3 base pairs to be replaced. Base with highest generated probability replaces the original base.
   Since this probability will range from 0.33 to 1, subtract 0.33 to make it from 0 to 0.66 (Better quality than should be error free) 
   now this probability 0 to 0.66 is multiplied by 10 and rounded up to make a quality score.
5. If the error does not occur, the base at that position remains the same and the quality score is generated by using unifrom distribution to generate a random number 
   from 0.66 to 1 (Always better than when error occurs) then it is multiplied by 10 and rounded up to generate a quality score for that position (10 becomes X)

Output format:

1. This section informs about the original simulated true sequence (X will be replace by A/T/G/C)
-----
Original Sequence:
	XXXXX
-----

2. This section informs about the n (number of iterations= 'c'*2 if paired end; 'c' if not) simulated sequence (X will be replaced by A/T/G/C)
   With simulated quality score (q will be replaced by a quality score)
-----
SimulatedSequences:

n	XXXXXXXXXX
	qqqqqqqqqq

-----

How to run the program:
python assignment1.py seq_len Perror c

Example:
python.exe .\assignment1.py 40 0.2 8

NOTE: - check output.txt file after running the program for the output.
      - paired_end is True by default. 
'''

import numpy
import sys


#Global Variables
Nucleotides=['A','T','G','C']
fh=open('output.txt','w')

def simulate_illumina_data(seq_len,Perror,c,paired_end=True):
    TrueSequence=[Nucleotides[i] for i in numpy.random.randint(0,4,seq_len)]

    if(paired_end):
        SimulationIterations=2*c
    else:
        SimulationIterations=c

    fh.write('Original Sequence:\n\t'+''.join(TrueSequence)+'\n\nSimulatedSequences:\n\n')
    for i in range(0,SimulationIterations):
        RecordedSequence=[]
        RecordedQuality=[]
        for j in TrueSequence:
            #Generate random number from uniform distribution
            if(numpy.random.uniform(low=0.0, high=1.0, size=None) < Perror):
                #Error Occurs
                NucleotidesOptions=[k for k in Nucleotides if k!=j]
                Quality=numpy.random.uniform(low=0.0, high=1.0, size=3)
                Quality=Quality/numpy.sum(Quality)
                RecordedSequence.append( NucleotidesOptions[ numpy.argmax(Quality) ] )
                #Since this score will range from 0.33 to 1, subtract 0.33 to make it from 0 to 0.66 (Better quality than should be error free)
                QualityScore=int( numpy.round( (numpy.max(Quality)-0.33)*10 ) )
                RecordedQuality.append(str(QualityScore))
            else:
                RecordedSequence.append(j)
                QualityScore=int(numpy.round( numpy.random.uniform(low=0.66, high=1.0, size=None)*10 ) )
                if(QualityScore==10):
                    RecordedQuality.append('X')
                else:
                    RecordedQuality.append(str(QualityScore))
                
        fh.write(str(i+1)+'\t'+''.join(RecordedSequence)+'\n\t'+''.join(RecordedQuality)+'\n\n')
    
    return True

def main():
    assert len(sys.argv) == 4, "'Check your arguments'"

    simulate_illumina_data( int(sys.argv[1]),float(sys.argv[2]),int(sys.argv[3]) )
    return True


if(__name__=='__main__'):
    main()

fh.flush()
fh.close()

assignment1.txt
Displaying assignment1.txt.
